//@version=5
indicator("ChatGPT + Free Published Strats on Tradingview", overlay=true, max_lines_count=500, max_boxes_count=200, max_bars_back=5000)

//---------------------------------------------------------------------------------------------------------------------
// CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------
TOTAL_VOLUME    = 'TOTAL VOLUME'
BUY_SELL_VOLUME = 'BUY&SELL VOLUME'
BULLISH         = 'BULLISH'
BEARISH         = 'BEARISH'
GREEN           = #089981
RED             = #F23645

DATA_GROUP          = 'Data Gathering'
PROFILE_GROUP       = 'Profile'
STYLE_GROUP         = 'Style'
EMA_GROUP           = 'EMA & RSI Settings'
TRADING_HOURS_GROUP = 'Trading Hours'
STYLE_EMA_GROUP     = 'EMA Style Settings'

executionVisualRangeTooltip = 'Activate this to use all visible bars on the calculations. This disables the use of the next parameter `Execute on the last N bars`. Default false.'
executionLastNBarsTooltip   = 'Use last N bars on the calculations. To use this parameter `Execute on all visible range` must be disabled. Values from 20 to 5000, default 500.'
pivotLengthTooltip          = 'How many bars will be used to confirm a pivot. The bigger this parameter is the fewer breaks of structure will detect. Values from 1, default 2'
profileSizeTooltip          = 'Number of rows in the volume profile. Values from 2 to 100, default 10.'
profileWidthTooltip         = 'Maximum width of the volume profile. Values from 25 to 500, default 200.'
profileModeTooltip          = 'How the volume will be displayed on each row. `TOTAL VOLUME` will aggregate buy & sell volume per row, `BUY&SELL VOLUME` will separate the buy volume from the sell volume on each row. Default BUY&SELL VOLUME'
buyColorTooltip             = 'This is the color for the buy volume on the profile when the `BUY&SELL VOLUME` mode is activated. Default green.'
sellColorTooltip            = 'This is the color for the sell volume on the profile when the `BUY&SELL VOLUME` mode is activated. Default red.'
showGridTooltip             = 'Show dotted inner grid levels. Default true.'

// Settings from LuxAlgo Indicator
executionVisualRangeInput   = input.bool(   false,          'Execute on all visible range', group=DATA_GROUP,       tooltip = executionVisualRangeTooltip)
executionLastNBarsInput     = input.int(    500,            'Execute on the last N bars',   group=DATA_GROUP,       tooltip = executionLastNBarsTooltip,    minval=20,  maxval=5000)
pivotLengthInput            = input.int(    2,              'Pivot Length',                 group=DATA_GROUP,       tooltip = pivotLengthTooltip,           minval=1)
profileSizeInput            = input.int(    10,             'Profile Rows',                 group=PROFILE_GROUP,    tooltip = profileSizeTooltip,           minval=2,   maxval=100)
profileWidthInput           = input.int(    200,            'Profile Width',                group=PROFILE_GROUP,    tooltip = profileWidthTooltip,          minval=25,  maxval=500, step=25)
profileModeInput            = input.string( BUY_SELL_VOLUME,'Profile Mode',                 group=PROFILE_GROUP,    tooltip = profileModeTooltip,           options=[TOTAL_VOLUME,BUY_SELL_VOLUME])
buyColorInput               = input.color(  GREEN,          'Buy Color',                    group=STYLE_GROUP,      tooltip = buyColorTooltip)
sellColorInput              = input.color(  RED,            'Sell Color',                   group=STYLE_GROUP,      tooltip = sellColorTooltip)
showGridInput               = input.bool(   true,           'Show dotted grid levels',      group=STYLE_GROUP,      tooltip = showGridTooltip)

// Settings from EMA Crossover + RSI Strategy
fastLength = input.int(5, title="Fast EMA Length", minval=1, maxval=100, group=EMA_GROUP)                  // Fast EMA period length
slowLength = input.int(20, title="Slow EMA Length", minval=1, maxval=100, group=EMA_GROUP)                 // Slow EMA period length
rsiLength = input.int(14, title="RSI Length", group=EMA_GROUP)                                             // RSI period length
rsiOverbought = input.int(70, title="RSI Overbought Level", minval=50, maxval=100, group=EMA_GROUP)        // Overbought level for RSI
rsiOversold = input.int(30, title="RSI Oversold Level", minval=0, maxval=50, group=EMA_GROUP)              // Oversold level for RSI

startHour = input.int(9, title="Start Trading Hour (24H)", minval=0, maxval=23, group=TRADING_HOURS_GROUP) // Start trading hour
endHour = input.int(15, title="End Trading Hour (24H)", minval=0, maxval=23, group=TRADING_HOURS_GROUP)    // End trading hour

fastEmaColor = input.color(color.green, title="Fast EMA Color", group=STYLE_EMA_GROUP)                     // Color for Fast EMA
slowEmaColor = input.color(color.red, title="Slow EMA Color", group=STYLE_EMA_GROUP)                       // Color for Slow EMA

//---------------------------------------------------------------------------------------------------------------------
// USER-DEFINED TYPES (UDT)
//---------------------------------------------------------------------------------------------------------------------
type pivotPoint
    int barIndex
    float priceLevel

type breakout
    pivotPoint pivot
    float breakoutVolume
    string bias
    int row

type profile
    array<float> sellVolume
    array<float> buyVolume
    array<float> totalVolume

//---------------------------------------------------------------------------------------------------------------------
// VARIABLES
//---------------------------------------------------------------------------------------------------------------------
var pivotPoint pivotHigh        = na
var pivotPoint pivotLow         = na
var array<breakout> breakouts   = array.new<breakout>(na)
var profile volumeProfile       = profile.new(na, na, na)
var array<line> grid            = array.new<line>(profileSizeInput, na)
var float executionTop          = 0.0
var float executionBottom       = 0.0
var bool lastExecutionWindow    = false
var int firstExecutionBar       = 0

//---------------------------------------------------------------------------------------------------------------------
// FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------
// Draw a new line from the pivot point to the current bar
drawBreakLine(pivotPoint point, color lineColor) => line.new(point.barIndex, point.priceLevel, bar_index, point.priceLevel, color=lineColor)

// Set for each breakout the correct row parameter
updateBreakoutRows(float top, float bottom) =>
    rowHeight = math.round_to_mintick((top - bottom) / profileSizeInput)
    for eachBreakout in breakouts        
        eachBreakout.row := math.min(int((top - eachBreakout.pivot.priceLevel) / rowHeight), profileSizeInput - 1)

// Recreate the profile 3 volume arrays from the breakouts: buy, sell and total volume
updateProfileRows() =>    
    volumeProfile.buyVolume     := array.new<float>(profileSizeInput, 0.0)
    volumeProfile.sellVolume    := array.new<float>(profileSizeInput, 0.0)
    volumeProfile.totalVolume   := array.new<float>(profileSizeInput, 0.0)
    
    for eachBreakout in breakouts
        array<float> selectedVolume = na

        if eachBreakout.bias == BULLISH
            selectedVolume := volumeProfile.buyVolume
        else
            selectedVolume := volumeProfile.sellVolume        

        currentVolume = array.get(selectedVolume, eachBreakout.row)
        array.set(selectedVolume, eachBreakout.row, currentVolume + eachBreakout.breakoutVolume)
        array.set(volumeProfile.totalVolume, eachBreakout.row, array.get(volumeProfile.totalVolume, eachBreakout.row) + eachBreakout.breakoutVolume)

// Draw a line from `bar` to `last_bar_index + 10` at the specified level and style
drawGridLine(int bar, float level, string style) => 
    startPoint  = chart.point.new(na, bar, level)
    endPoint    = chart.point.new(na, last_bar_index + 10, level)
    array.push(grid, line.new(startPoint, endPoint, color=chart.fg_color, style=style))

// Draw a volume profile box with the specified parameters                      
drawProfileSimpleRow(float top, float bottom, int left, float rowVolume, color backgroundColor = color.blue, string textHAlign = text.align_left) =>
    maxTotalVolume = array.max(volumeProfile.totalVolume)
    boxWidth    = int((rowVolume * (profileWidthInput - 10)) / maxTotalVolume)
    topLeft     = chart.point.new(na, left, top)
    bottomRight = chart.point.new(na, left + boxWidth, bottom)            
    box.new(topLeft, bottomRight, border_color=na, text=rowVolume > 0 ? str.tostring(rowVolume, format.volume) : na, bgcolor=backgroundColor, text_color=chart.fg_color, text_size=size.tiny, text_halign=textHAlign)

// Draw 2 volume profile boxes with the specified parameters
drawProfileDoubleRow(float top, float bottom, int middle, float buyVolume, float sellVolume) =>    
    maxTotalVolume = array.max(volumeProfile.totalVolume)
    boxWidth    = int((sellVolume * (profileWidthInput - 10)) / maxTotalVolume)
    drawProfileSimpleRow(top, bottom, middle - boxWidth, sellVolume, sellColorInput, text.align_right)
    drawProfileSimpleRow(top, bottom, middle, buyVolume, buyColorInput)

// Draw the grid and the volume profile
drawFullProfile(float top, float bottom, int firstBar) =>
    updateBreakoutRows(top, bottom)
    updateProfileRows()

    for eachBox in box.all
        box.delete(eachBox)

    for eachLine in grid
        line.delete(eachLine)

    rowHeight = math.round_to_mintick((top - bottom) / profileSizeInput)
    rowGap = math.max(math.round_to_mintick(rowHeight / 10), syminfo.mintick)
    
    leftIndex = last_bar_index + 10
    middleIndex = leftIndex + int((array.max(volumeProfile.sellVolume) * (profileWidthInput - 10)) / array.max(volumeProfile.totalVolume))

    // draw top solid grid line            
    drawGridLine(firstBar, top, line.style_solid)                   

    for index = 0 to profileSizeInput - 1
        rowTop = top - index * rowHeight - rowGap
        rowBottom = (index == (profileSizeInput - 1) ? bottom : rowTop - rowHeight + rowGap) + rowGap

        if showGridInput and index > 0
            drawGridLine(firstBar, rowTop + rowGap, line.style_dotted)        

        if profileModeInput == TOTAL_VOLUME
            drawProfileSimpleRow(rowTop, rowBottom, leftIndex, array.get(volumeProfile.totalVolume, index))            
        else
            drawProfileDoubleRow(rowTop, rowBottom, middleIndex, array.get(volumeProfile.buyVolume, index), array.get(volumeProfile.sellVolume, index))            

    // draw bottom grid line            
    drawGridLine(firstBar, bottom, line.style_solid)                   

//---------------------------------------------------------------------------------------------------------------------
// MUTABLE VARIABLES & EXECUTION
//---------------------------------------------------------------------------------------------------------------------
currentPivotHigh        = ta.pivothigh(pivotLengthInput, pivotLengthInput)
currentPivotLow         = ta.pivotlow(pivotLengthInput, pivotLengthInput)
currentExecutionWindow  = executionVisualRangeInput ? time >= chart.left_visible_bar_time : (last_bar_index - bar_index) <= executionLastNBarsInput
pivotBarIndex           = bar_index[pivotLengthInput]

// Check if we are inside execution window
if currentExecutionWindow
    
    // Check if this is the first bar inside execution window
    if not lastExecutionWindow    
        executionTop        := high
        executionBottom     := low
        firstExecutionBar   := bar_index    

    lastExecutionWindow := currentExecutionWindow   
    
    // We execute this logic only once per bar 
    if barstate.isconfirmed
        
        // Avoid runtime error when execution window is too big
        if (last_bar_index - firstExecutionBar) > 5000
            runtime.error('Execution windows bigger than 5000 bars are not allowed. Please use a smaller execution window.')

        // Update of top and bottom prices inside execution window
        executionTop    := math.max(high, executionTop)
        executionBottom := math.min(low, executionBottom)

        // If we identify a pivot high, we store it into `pivotHigh` variable
        if not na(currentPivotHigh)
            pivotHigh := pivotPoint.new(pivotBarIndex, currentPivotHigh)

        // If we identify a pivot low, we store it into `pivotLow` variable
        if not na(currentPivotLow)
            pivotLow := pivotPoint.new(pivotBarIndex, currentPivotLow)

        // If we have a pivotHigh and a break of its level, we store the breakout and draw the line
        if not na(pivotHigh) 
            if close > pivotHigh.priceLevel            
                array.push(breakouts, breakout.new(pivotHigh, volume, BULLISH))                
                drawBreakLine(pivotHigh, buyColorInput)        
                pivotHigh := na                

        // If we have a pivotLow and a break of its level, we store the breakout and draw the line
        if not na(pivotLow)
            if close < pivotLow.priceLevel           
                array.push(breakouts, breakout.new(pivotLow, volume, BEARISH))                
                drawBreakLine(pivotLow, sellColorInput)
                pivotLow := na                
                
        // Avoid drawing when no breakouts detected
        if barstate.islastconfirmedhistory or barstate.isrealtime

            if array.size(breakouts) == 0
                runtime.error('No breaks of structure detected. Please modify `Data Gathering` parameters on the settings window. Ex. smaller `Pivot Length` and/or bigger execution window')

            // We draw both the grid and the volume profile
            drawFullProfile(executionTop, executionBottom, firstExecutionBar)           

//---------------------------------------------------------------------------------------------------------------------
// EMA & RSI Calculations
//---------------------------------------------------------------------------------------------------------------------
fastEMA = ta.ema(close, fastLength)    // Fast EMA calculation
slowEMA = ta.ema(close, slowLength)    // Slow EMA calculation
rsi = ta.rsi(close, rsiLength)         // RSI calculation

// Plot the EMAs on the chart
plot(fastEMA, title="Fast EMA", color=fastEmaColor)
plot(slowEMA, title="Slow EMA", color=slowEmaColor)

// Trading Conditions
isTradingHour = (hour(time) >= startHour) and (hour(time) <= endHour)   // Define trading window

// Entry conditions
longCondition = ta.crossover(fastEMA, slowEMA) and rsi < rsiOversold and isTradingHour
shortCondition = ta.crossunder(fastEMA, slowEMA) and rsi > rsiOverbought and isTradingHour

// Exit conditions
exitLongCondition = ta.crossunder(fastEMA, slowEMA) and isTradingHour
exitShortCondition = ta.crossover(fastEMA, slowEMA) and isTradingHour

// Plot Labels for Manual Trading
if (longCondition)
    label.new(x=bar_index, y=low, text="BUY", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)

if (shortCondition)
    label.new(x=bar_index, y=high, text="SELL", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

if (exitLongCondition)
    label.new(x=bar_index, y=high, text="EXIT BUY", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

if (exitShortCondition)
    label.new(x=bar_index, y=low, text="EXIT SELL", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)
// define user inputs
const string userI = "User Inputs"

series float  src = input.source(close, "Price Source", group=userI)
string        smoothingMethod = input.string("EMA", "Smoothing Method", options=["EMA", "SMA"], group=userI)
simple int    period = input.int(20, "Smoothing Period", minval=1, group=userI)
simple float  variance = input.float(1.5, "PDF Variance", step=0.1, minval=0.1, group=userI)
simple float  mean = input.float(0.0, "PDF Mean", step=0.1, minval=-1.0, maxval=1.0, group=userI)

simple bool   showpdf = input.bool(true, "Show PDF MA on chart?", group = "UI Settings")
simple bool   paintCandles = input.bool(true, "Paint candles according to Trend?", group = "UI Settings")




// PDF Function
pdf(x, variance, mean) =>
    1 / (variance * math.sqrt(2 * math.pi)) * math.exp(-math.pow(x - mean, 2) / (2 * math.pow(variance, 2)))

// MA Function
pdf_ma(src, period, variance, mean, method) =>
    step = math.pi / (period - 1)
    coeffs = array.new_float()
    for k = 0 to period - 1
        x = k * step
        weight = pdf(x, variance, mean * math.pi)
        array.push(coeffs, weight)
    sum_weights = array.sum(coeffs)
    weighted_sum = 0.0
    for i = 0 to period - 1
        weight = array.get(coeffs, i)
        src_value = nz(src[i])
        weighted_sum += weight * src_value
    weighted_avg = weighted_sum / sum_weights

    ma = method == "EMA" ? ta.ema(src, period) : ta.sma(src, period)
    out = (weighted_avg + ma) / 2
    out

pdf_ma_val = pdf_ma(src, period, variance, mean, smoothingMethod)


// Conditional Trend
var Trend = 0

if pdf_ma_val>pdf_ma_val[1]
    Trend := 1
if pdf_ma_val<pdf_ma_val[1] 
    Trend := -1

// Colouring
var barColour = #ffffff
if Trend == 1 
    barColour := #33ff00
if Trend == -1
    barColour := #ff0000

// Plotting
barcolor(paintCandles ? barColour : na)

plot(
 showpdf ? pdf_ma_val : na, 
 "Kalman", 
 color = color.new(barColour, 40), 
 linewidth = 4
 )
